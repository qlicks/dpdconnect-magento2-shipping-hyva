<?php
/**
 * This file is part of the Magento 2 Shipping module of DPD Nederland B.V.
 *
 * Copyright (C) 2019  DPD Nederland B.V.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

use DpdConnect\ShippingHyva\ViewModel\CheckoutConfig;
use Hyva\Theme\Model\ViewModelRegistry;

/** @var ViewModelRegistry $viewModels */

/** @var CheckoutConfig $checkoutConfigViewModel */
$checkoutConfigViewModel = $viewModels->require(CheckoutConfig::class);

$checkoutConfig = $checkoutConfigViewModel->getConfig();
?>

<?= $this->getChildHtml('dpd.googlemaps.api'); ?>

<script>
    function initDpdShipping() {
        return {
            error: null,
            googleKey: '<?= $checkoutConfig['dpd_parcelshop_google_key'] ?>',
            locale: '<?= $checkoutConfig['dpd_locale'] ?>' || 'nl',
            saveUrl: '<?= $checkoutConfig['dpd_parcelshop_save_url'] ?>',
            selectedParcelshop: null,
            selectedParcelshopHtml: null,
            token: '<?= $checkoutConfig['dpd_parcelshop_token'] ?>',
            useDpdKey: <?= !empty($checkoutConfig['dpd_parcelshop_use_dpd_key']) ? 'true' : 'false' ?>,
            validationError: null,
            lastMapFrame: null,
            init() {
                document.addEventListener('click', (event) => {
                    if (
                        Object.values(event.target.classList).includes('btn-next') ||
                        Object.values(event.target.classList).includes('btn-place-order')
                    ) {
                        this.handleButtonClick(event);
                    }
                }, {
                    capture: true
                });

                try {
                    Magewire.on('shipping_address_saved', () => {
                        setTimeout(() => {
                            const parcelshop = sessionStorage.getItem('selectedParcelshop');

                            if (parcelshop) {
                                this.selectParcelshop(JSON.parse(parcelshop));
                            } else {
                                let searchAddress = this.getFormAddress();

                                if(!searchAddress) {
                                    return;
                                }

                                this.showMap(searchAddress);
                            }
                        }, 500);
                    });
                } catch (e) {}


                try {
                    Magewire.on('shipping_address_submitted', (id) => {
                        setTimeout(() => {
                            const parcelshop = sessionStorage.getItem('selectedParcelshop');

                            if (parcelshop) {
                                this.selectParcelshop(JSON.parse(parcelshop));
                            } else {
                                let searchAddress = this.getAddressById(id);

                                if(!searchAddress) {
                                    return;
                                }

                                this.showMap(this.formatAddress(searchAddress));
                            }
                        }, 500);
                    });

                    Magewire.on('shipping_address_activated', (id) => {
                        setTimeout(() => {
                            const parcelshop = sessionStorage.getItem('selectedParcelshop');
    
                            if (parcelshop) {
                                this.selectParcelshop(JSON.parse(parcelshop));
                            } else {
                                let searchAddress = this.getAddressById(id);

                                if(!searchAddress) {
                                    return;
                                }

                                this.showMap(this.formatAddress(searchAddress));
                            }
                        }, 500);
                    });
                } catch (e) {}

                const parcelshop = sessionStorage.getItem('selectedParcelshop');

                if (parcelshop) {
                    this.selectParcelshop(JSON.parse(parcelshop));
                } else {
                    let searchAddress = this.getFormAddress();

                    if(!searchAddress) {
                        return;
                    }

                    this.showMap(this.formatAddress(searchAddress));
                }
            },
            getAddress() {
                const map = {};
                document.querySelectorAll('.address-grid .address-item').forEach(li => {
                    const id = li.querySelector('input[type="radio"]')?.value;
                    const json = li.getAttribute('data-address');
                    if (id && json) {
                        try { map[String(id)] = JSON.parse(json); } catch {}
                    }
                });
                document.querySelectorAll('.address-list .address-item').forEach(li => {
                    const id = li.querySelector('input[type="radio"]')?.value;
                    const json = li.getAttribute('data-address');
                    if (id && json) {
                        try { map[String(id)] = JSON.parse(json); } catch {}
                    }
                });
                return map;
            },
            getAddressById(id) {
                let addresses = this.getAddress();
                let idAdd = id.id ? id.id : 0;
                return addresses[idAdd] || null;
            },
            getFormAddress() {
                try {
                    addressForm = Magewire.find('checkout.shipping-details.address-form');
                } catch (e) {}
                try {
                    addressForm = Magewire.find('checkout.shipping-details.address-list.form');
                } catch (e) {}

                if(!addressForm) {
                    return null;
                }
                const shippingAddress = addressForm.get('address');

                if (!shippingAddress.postcode || !shippingAddress.country_id) {
                    this.error = hyva.str('No address entered. Please enter your address and try again.');
                    return null;
                }

                return this.formatAddress(address);
            },
            formatAddress(address) {
                const searchAddress = address.street[0] + ' ' +
                    address.postcode + ' ' +
                    address.city + ' ' +
                    address.country_id;

                return searchAddress;
            },
            flatten(object) {
                const urlSearchParams = new URLSearchParams();

                for (const key in object) {
                    const value = object[key];

                    if (Array.isArray(value)) {
                        value.forEach((nestedValue, index) => {
                            for (const nestedKey in nestedValue) {
                                urlSearchParams.append(key + '[' + index + '][' + nestedKey + ']', nestedValue[nestedKey] ?? '');
                            }
                        });
                    }
                    else {
                        urlSearchParams.append(key, value ?? '');
                    }
                }

                return urlSearchParams;
            },

            handleButtonClick(event) {
                const parcelShopId = document.querySelector('.parcelshopId');

                if (!(parcelShopId) || !(parcelShopId.value)) {
                    event.stopPropagation();

                    this.validationError = hyva.str('This is a required field.');
                }
            },

            handleWindowClick(event) {
                if (!event.target.classList.contains('dpd_connect_change_parcelshop')) {
                    return;
                }

                event.preventDefault();

                sessionStorage.removeItem('selectedParcelshop');

                this.selectedParcelshop = null;
                this.selectedParcelshopHtml = null;

                this.showMap();
            },

            selectParcelshop(parcelshop) {
                this.validationError = null;
                this.selectedParcelshop = parcelshop;

                sessionStorage.setItem('selectedParcelshop', JSON.stringify(this.selectedParcelshop));

                fetch(this.saveUrl, {
                    body: this.flatten(this.selectedParcelshop),
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest',
                    },
                    method: 'POST'
                }).then((response) => {
                    response.text().then((text) => {
                        this.selectedParcelshopHtml = text;
                    });
                });
            },

            showMap(searchAddress) {
                this.error = null;
                this.validationError = null;
                this.lastMapFrame = null;

                if(!searchAddress) {
                    return;
                }

                /** @var DPDConnect */
                DPDConnect.onParcelshopSelected = this.selectParcelshop.bind(this);

                if (this.useDpdKey) {
                    /** @var DPDConnect */
                    DPDConnect.show(this.token, searchAddress, this.locale);
                } else {

                    /** @var DPDConnect */
                    DPDConnect.show(this.token, searchAddress, this.locale, this.googleKey);

                    if(document.getElementById('dpd-connect-map-container')) {
                        this.lastMapFrame = document.getElementById('dpd-connect-map-container').innerHTML;
                    }
                }
            }
        }
    }
</script>
